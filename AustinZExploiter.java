import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;

/**
 * Created by austinzhang on 4/26/17.
 */
public class AustinZExploiter {

    private HashMap<Integer, Integer> weaponsSuggested;
    private HashMap<Integer, Integer> roomsSuggested;
    private HashMap<Integer, Integer> peopleSuggested;
    private int threshold;


    public HashMap<Integer, Integer> getRoomsSuggested() {
        return roomsSuggested;
    }

    public AustinZExploiter(int threshold) {
        weaponsSuggested = new HashMap<Integer, Integer>();
        roomsSuggested = new HashMap<Integer, Integer>();
        peopleSuggested = new HashMap<Integer, Integer>();
        this.threshold = threshold;

        //System.out.println("REINITIALIZED");

        for (int i = 0; i < 6; i++) {
            weaponsSuggested.put(i, 0);
            peopleSuggested.put(i, 0);
        }

        for (int i = 0; i < 9; i++) {
            roomsSuggested.put(i, 0);
        }
    }

    public void update(Suggestion suggestion) {
        weaponsSuggested.put(suggestion.getWeapon(), weaponsSuggested.get(suggestion.getWeapon()) + 1);
        roomsSuggested.put(suggestion.getRoom(), roomsSuggested.get(suggestion.getRoom()) + 1);
        peopleSuggested.put(suggestion.getPerson(), peopleSuggested.get(suggestion.getPerson()) + 1);


        //System.out.println(roomsSuggested.toString());

        /*
        System.out.println("updated");
        System.out.println(weaponsSuggested.toString());
        System.out.println(peopleSuggested.toString());
        */
    }

    public HashSet<Card> getCardsThatExceedThreshold() {
        HashSet<Card> exceededThreshold = new HashSet<Card>();

        for (Integer key : weaponsSuggested.keySet()) {
            if (weaponsSuggested.get(key) >= threshold) {
                exceededThreshold.add(new Card(Card.WEAPON, key));
            }
        }

        for (Integer key : roomsSuggested.keySet()) {
            if (roomsSuggested.get(key) >= threshold) {
                exceededThreshold.add(new Card(Card.ROOM, key));
            }
        }

        for (Integer key : peopleSuggested.keySet()) {
            if (peopleSuggested.get(key) >= threshold) {
                exceededThreshold.add(new Card(Card.PERSON, key));
            }
        }

        return exceededThreshold;
    }

    public HashSet<Card> getPeopleThatExceedThreshold () {
        HashSet<Card> exceededThreshold = new HashSet<Card>();

        for (Integer key : peopleSuggested.keySet()) {
            if (peopleSuggested.get(key) >= threshold) {
                exceededThreshold.add(new Card(Card.PERSON, key));
            }
        }

        return exceededThreshold;
    }


    public HashSet<Card> getWeaponsThatExceedThreshold () {
        HashSet<Card> exceededThreshold = new HashSet<Card>();

        for (Integer key : weaponsSuggested.keySet()) {
            if (weaponsSuggested.get(key) >= threshold) {
                exceededThreshold.add(new Card(Card.WEAPON, key));
            }
        }

        return exceededThreshold;
    }


    public HashSet<Card> getRoomsThatExceedThreshold () {
        HashSet<Card> exceededThreshold = new HashSet<Card>();

        for (Integer key : roomsSuggested.keySet()) {
            if (roomsSuggested.get(key) >= threshold) {
                exceededThreshold.add(new Card(Card.ROOM, key));
            }
        }

        return exceededThreshold;
    }

    public Suggestion validSolution(HashSet<Card> fullDeck, ArrayList<HashSet<Card>> cardsPlayersHave) {
        //Gets a hash set of all current possible answers
        Card room = null;
        Card person = null;
        Card weapon = null;

        HashSet<Card> allAnswers = fullDeck;
        for (HashSet<Card> cards : cardsPlayersHave) {
            for (Card card : cards) {
                allAnswers.remove(card);
            }
        }

        for (Card possibleAnswer : allAnswers) {
            if (getPeopleThatExceedThreshold().contains(possibleAnswer)) {
                person = possibleAnswer;
            }

            if (getWeaponsThatExceedThreshold().contains(possibleAnswer)) {
                weapon = possibleAnswer;
            }

            if (getRoomsThatExceedThreshold().contains(possibleAnswer)) {
                room = possibleAnswer;
            }
        }

        if (person != null && room != null && weapon != null) {
            //System.out.println("GUESSING ANSWER");
            return new Suggestion(person.getValue(), room.getValue(), weapon.getValue());
        }
        else {
            return null;
        }

    }
}
